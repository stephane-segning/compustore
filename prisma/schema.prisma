// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model ProductPrice {
    id        Int      @id @default(autoincrement())
    price     Float
    currency  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    product   Product? @relation(fields: [productId], references: [id])
    productId Int?

    variant   ProductVariant? @relation(fields: [variantId], references: [id])
    variantId Int?

    @@index([productId])
    @@index([productId, variantId])
    @@index([variantId])
}

model ProductStock {
    id Int @id @default(autoincrement())

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    variant   ProductVariant? @relation(fields: [variantId], references: [id])
    variantId Int?

    stock     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([productId, variantId])
    @@index([variantId])
}

model Category {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    description String?
    products    Product[] @relation("ProductCategories")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Product {
    id          Int            @id @default(autoincrement())
    name        String
    description String?
    stocks      ProductStock[]
    prices      ProductPrice[]
    priceId     Int            @unique
    isDigital   Boolean        @default(false)
    status      ProductStatus  @default(DRAFT)

    thumbnail   Image? @relation("thumbnail", fields: [thumbnailId], references: [id])
    thumbnailId Int?   @unique

    images    Image[]          @relation("ProductImages")
    variants  ProductVariant[]
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    // Add the relationship to categories
    categories Category[] @relation("ProductCategories")
}

enum ProductStatus {
    DRAFT
    PUBLISHED
}

model ProductVariant {
    id Int @id @default(autoincrement())

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    name        String
    description String?
    prices      ProductPrice[]
    stocks      ProductStock[]

    thumbnail   Image? @relation("thumbnail", fields: [thumbnailId], references: [id])
    thumbnailId Int?   @unique

    images    Image[]  @relation("VariantImages")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Image {
    id    Int     @id @default(autoincrement())
    url   String
    title String?

    productThumbnail Product?        @relation("thumbnail")
    variantThumbnail ProductVariant? @relation("thumbnail")

    product   Product? @relation("ProductImages", fields: [productId], references: [id])
    productId Int?

    variant   ProductVariant? @relation("VariantImages", fields: [variantId], references: [id])
    variantId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([variantId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    products      Product[]
    role          Role      @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}
