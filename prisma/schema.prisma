// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Currency {
  XAF
  USD

  @@map("currencies")
}

model ProductPrice {
  id       String   @id @default(cuid())
  price    Float
  currency Currency @default(XAF)

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([productId, variantId])
  @@index([variantId])
  @@map("product_prices")
}

model ProductStock {
  id String @id @default(cuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?

  stock Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([productId, variantId])
  @@index([variantId])
  @@map("product_stocks")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[] @relation("product_categories")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
  @@map("categories")
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  stocks      ProductStock[]
  prices      ProductPrice[]
  isDigital   Boolean        @default(false)
  status      ProductStatus  @default(DRAFT)

  thumbnail   Image?  @relation("thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId String? @unique

  images   Image[]          @relation("product_images")
  variants ProductVariant[]
  cartItem CartItem[]

  // Add the relationship to categories
  categories Category[] @relation("product_categories")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  @@index([name])
  @@index([status, name])
  @@map("products")
}

enum ProductStatus {
  DRAFT
  PUBLISHED

  @@map("product_statuses")
}

model ProductVariant {
  id String @id @default(cuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  name        String
  description String?
  prices      ProductPrice[]
  stocks      ProductStock[]

  thumbnail   Image?  @relation("thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId String? @unique

  images Image[] @relation("variant_images")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  CartItem  CartItem[]

  @@index([productId])
  @@map("product_variants")
}

model Image {
  id    String  @id @default(cuid())
  url   String
  title String?

  productThumbnail Product?        @relation("thumbnail")
  variantThumbnail ProductVariant? @relation("thumbnail")

  product   Product? @relation("product_images", fields: [productId], references: [id])
  productId String?

  variant   ProductVariant? @relation("variant_images", fields: [variantId], references: [id])
  variantId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([variantId])
  @@map("images")
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique // Ensures each user has only one active cart
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String          @id @default(cuid())
  cart      Cart            @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product         @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int             @default(1)
  price     Float // Price at the time of adding to cart
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([cartId])
  @@index([cartId, productId])
  @@index([productId])
  @@index([productId, variantId])
  @@index([variantId])
  @@map("cart_items")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId])
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cart      Cart?

  @@index([name])
  @@index([email])
  @@index([role])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN

  @@map("roles")
}

model PaymentSession {
  id              String   @id @default(cuid())
  userId          String
  paymentIntentId String
  cartDetails     Json
  amount          Int
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
